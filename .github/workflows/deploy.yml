name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'doc/**'
      - '.github/**'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, pgsql, zip, dom
    
    - name: Install Dependencies
      working-directory: ./backend
      run: composer install --no-dev --optimize-autoloader
    
    - name: Prepare backend files for deployment
      run: |
        mkdir -p ./dist/backend
        cp -R ./backend/* ./dist/backend/
        cp -R ./backend/.env.example ./dist/backend/.env
        
    - name: Deploy Backend to ${{ github.event.inputs.environment || 'staging' }}
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        source: "./dist/backend/*"
        target: "/home/${{ secrets.SSH_USERNAME }}/area-backend"
        strip_components: 2
        
    - name: Setup Backend Environment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script_stop: true
        command_timeout: "20m"
        script: |
          mkdir -p ~/area-backend
          
          if ! command -v php &> /dev/null; then
            echo "Installing PHP and dependencies..."
            sudo apt-get update
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y php8.1-cli php8.1-fpm php8.1-pgsql php8.1-mbstring php8.1-xml php8.1-curl php8.1-zip
          fi
          
          if ! command -v composer &> /dev/null; then
            echo "Installing Composer..."
            curl -sS https://getcomposer.org/installer | php
            sudo mv composer.phar /usr/local/bin/composer
          fi
          
          cd ~/area-backend
          echo "Installing Composer dependencies (this may take several minutes)..."
          composer install --no-dev --no-interaction --optimize-autoloader --no-progress --prefer-dist --ignore-platform-reqs
          
          if [ ! -f .env ]; then
            echo "Setting up environment file..."
            cp .env.example .env
            php artisan key:generate --force
          fi
          
          echo "Configuring database connection..."
          sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=pgsql/g' .env
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=localhost/g' .env
          sed -i 's/DB_PORT=3306/DB_PORT=5432/g' .env
          sed -i 's/DB_DATABASE=laravel/DB_DATABASE=area_db/g' .env
          sed -i 's/DB_USERNAME=root/DB_USERNAME=ubuntu/g' .env
          sed -i "s/DB_PASSWORD=/DB_PASSWORD=${{ secrets.DB_PASSWORD || 'change_me_in_production' }}/g" .env
          
          if ! command -v psql &> /dev/null; then
            echo "Installing PostgreSQL..."
            sudo apt-get update
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql postgresql-contrib
          fi
          
          if ! sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw area_db; then
            echo "Creating PostgreSQL database and user..."
            sudo -u postgres psql -c "CREATE USER ubuntu WITH PASSWORD '${{ secrets.DB_PASSWORD || 'change_me_in_production' }}';"
            sudo -u postgres psql -c "CREATE DATABASE area_db OWNER ubuntu;"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE area_db TO ubuntu;"
          fi
          
          echo "Running database migrations..."
          php artisan migrate --force || echo "Migration failed, check database connection"
          
          if [ -f ~/area-backend.pid ]; then
            echo "Stopping existing Laravel server..."
            kill $(cat ~/area-backend.pid) 2>/dev/null || true
            rm ~/area-backend.pid
          fi
          
          echo "Starting Laravel server..."
          nohup php artisan serve --host=0.0.0.0 --port=8000 > ~/area-backend.log 2>&1 & echo $! > ~/area-backend.pid
          echo "Backend deployment completed!"
    
    - name: Health Check Backend
      run: |
        if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
          curl --fail --retry 3 --retry-delay 5 --max-time 10 ${{ secrets.PROD_API_URL || 'http://144.24.201.112:8000' }}/api/test
        else
          curl --fail --retry 3 --retry-delay 5 --max-time 10 ${{ secrets.STAGING_API_URL || 'http://144.24.201.112:8000' }}/api/test
        fi
  
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Setup Environment Variables
      working-directory: ./frontend
      run: |
        if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
          echo "VITE_API_URL=${{ secrets.PROD_API_URL || 'http://144.24.201.112:8000' }}" > .env
        else
          echo "VITE_API_URL=${{ secrets.STAGING_API_URL || 'http://144.24.201.112:8000' }}" > .env
        fi
    
    - name: Install and Build
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
    
    - name: Prepare frontend build
      run: |
        mkdir -p ./dist/frontend
        cp -R ./frontend/dist/* ./dist/frontend/ || echo "Build directory may not exist"
    
    - name: Upload Frontend Build
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        source: "./dist/frontend/*"
        target: "/home/${{ secrets.SSH_USERNAME }}/area-frontend"
        strip_components: 2
        
    - name: Setup Frontend Environment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script_stop: true
        command_timeout: "10m"
        script: |
          # Create directory structure
          mkdir -p ~/area-frontend
          
          # Install web server if needed
          if ! command -v nginx &> /dev/null; then
            echo "Installing Nginx..."
            sudo apt-get update
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y nginx
          fi
          
          # Configure nginx for the frontend
          echo "Configuring Nginx..."
          sudo tee /etc/nginx/sites-available/area-frontend > /dev/null << 'EOF'
          server {
              listen 80;
              server_name _;
              
              root /home/ubuntu/area-frontend;
              index index.html;
              
              location / {
                  try_files $uri $uri/ /index.html;
              }
              
              location /api/ {
                  proxy_pass http://localhost:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_connect_timeout 300s;
                  proxy_read_timeout 300s;
              }
          }
          EOF
          
          # Enable the site and disable default if exists
          echo "Setting up Nginx site configuration..."
          if [ -f /etc/nginx/sites-enabled/default ]; then
            sudo rm -f /etc/nginx/sites-enabled/default
          fi
          sudo ln -sf /etc/nginx/sites-available/area-frontend /etc/nginx/sites-enabled/
          
          # Test and restart nginx
          echo "Restarting Nginx..."
          sudo nginx -t && sudo systemctl restart nginx || echo "Warning: Nginx configuration test failed"
          echo "Frontend deployment completed!"

    - name: Smoke Test Frontend
      run: |
        if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
          URL="${{ secrets.FRONTEND_URL || 'http://144.24.201.112' }}"
        else
          URL="${{ secrets.STAGING_FRONTEND_URL || 'http://144.24.201.112' }}"
        fi
        curl --fail --retry 3 --retry-delay 5 --max-time 10 $URL