name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pdo_pgsql
        coverage: none

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Install backend dependencies
      run: |
        cd backend
        composer install --no-dev --optimize-autoloader

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Navigate to deployment directory
          cd /home/deploy
          
          # Backup current deployment
          if [ -d "area-app" ]; then
            cp -r area-app area-app-backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Clone or update repository
          if [ -d "area-app/.git" ]; then
            cd area-app
            git fetch origin
            git reset --hard origin/main
            git clean -fd
          else
            rm -rf area-app
            git clone https://github.com/${{ github.repository }}.git area-app
            cd area-app
          fi
          
          # Install backend dependencies
          cd backend
          composer install --no-dev --optimize-autoloader
          
          # Copy environment file if it doesn't exist
          if [ ! -f .env ]; then
            cp .env.example .env
            php artisan key:generate
          fi
          
          # Run database migrations
          php artisan migrate --force
          
          # Clear and cache config
          php artisan config:clear
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          
          # Set proper permissions
          chmod -R 775 storage bootstrap/cache
          
          # Install frontend dependencies and build
          cd ../frontend
          npm ci
          npm run build
          
          # Restart Laravel backend via Supervisor
          supervisorctl restart laravel-backend
          
          # Reload Nginx
          systemctl reload nginx
          
          echo "Deployment completed successfully!"

    - name: Health Check
      run: |
        sleep 10
        curl -f http://${{ secrets.HOST }}/ || exit 1
        echo "Health check passed!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi